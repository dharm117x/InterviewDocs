1. Diff flush() and commit() methods.
------------------------------------
> Flush can be rollback but after commit not possible.
> Flush will synchronize database with currrent state of objects in memory but not commit transaction.
> Flush can use in batch process to avoid outoffmemory error.


2. How to improve database perperformance:
------------------------------------------
> Data indexing
  > Identified frequently accesses columns
  > Composite index
  > Avoid over indexing

> Query optimization
 > Avoid select * instead of specific column
 > Limit results
 > Filter data early-Use where clause as early as possible.
 > Use JOIN wisely- 

> Database caching
 > Query result caching
 > Object caching

> Database normilaztion
> Hardware Optimization
> Database Tuning
> Backup and Recovery
> Partitioning 

3. SQL JOINS
---------------
Employee, Department

1. INNER
 > Select all rows from both tables based on condtions satisfied.
2. LEFT/ LEFT OUTER
 > Select all rows from left tables and matching result from right side table.
3. RIGHT
 > Select all rows from Right tables and matching result from left side table.
4. FULL 
 > Craete results by combining LEFT and RIGHT join, its contain all the row from both tables
5. NATURAL
 > Tow tables join using cross join. and both table have at leaset one column with same name and type.
6. SELF
 > A self join is a regular join, but the table is joined with itself.

4. UNION and UNION ALL
-------------------------
The UNION operator combines the results of two or more SELECT queries into a single result set.
> union:  combined result with same column name and type and avoid duplicate.
> unions: Add duplicate value as well.

select city, name from Customer
UNION
select city, name from Employee
order by city

Condition from UNION :
1. select statement have same numbers have columns.
2. The columns must have same data type.
3. The column of every select statement must have in same order and same name.

>> Differentiate between the WHERE clause and the HAVING clause in Oracle SQL. 

The WHERE clause filters rows before grouping – Filtering is also based on certain conditions. 
The HAVING clause filters rows after grouping – after aggregation. 

5. Case in query:
-----------------
>Simple CASE
SELECT cust_last_name,
   CASE credit_limit WHEN 100 THEN 'Low'
   WHEN 5000 THEN 'High'
   ELSE 'Medium' END
   FROM customers;

>Searched case:
SELECT AVG(CASE WHEN e.salary > 2000 THEN e.salary
   ELSE 2000 END) "Average Salary" FROM employees e;

select * from Status s
where s.status = (case when s.code='A' then 'Good' else 'Bad' end)

seelct case when s.enddate is not null
	then s.endate 
        else s.startdate 
        end as data_time
from Status s;


5. Select Query:
----------------
> odd/even data from table:

select * from Table where rownumber % 2 ==0 // even row
select * from Table where rownumber % 2 !=0 // odd row

> Select Max Nth salary from employee:
---------------------------------------
// by dens_rank()

SELECT * FROM (
  SELECT emp_name, emp_salary, DENSE_RANK() OVER (ORDER BY emp_salary DESC) AS r
  FROM emp
) AS subquery
WHERE r = 3;

// by limit

SELECT MIN(sal) FROM Employee WHERE sal IN (
  SELECT DISTINCT sal
  FROM Employee
  ORDER BY sal DESC
  LIMIT 4
);

Select emp_sal from Emp order by emp_sal DESC limit 3,1;

// by top

SELECT * FROM Employee WHERE sal = 
         (
            SELECT MIN(sal) FROM Employee 
            WHERE  sal IN (
            SELECT DISTINCT TOP N
            sal FROM Employee 
            ORDER BY sal DESC
))

> Find the average salary of employees within each department.
--------------------------------------------------------------
SELECT department_id, AVG(salary) AS average_salary
FROM employees
GROUP BY department_id;

> max salry by dept.

SELECT DEPT_ID, MAX(SALARY) FROM department GROUP BY DEPT_ID;
 
> Find employees who earn more than their managers.
---------------------------------------------------
SELECT emp.*
FROM Employee emp
INNER JOIN Employee mgr ON emp.manager_id = mgr.employee_id
WHERE emp.salary > mgr.salary;

> Find department by salary which greater then 2000
---------------------------------------------------
SELECT d.dname, sum(e.sal) salary  
FROM Employee e 
join Department d on e.deptno = d.deptno
group by d.dname
having sum(e.sal) > 2000
order by d.dname;

>Find duplicate by columnn data
----------------------------------
select name, count(*) as count
from Employee
group by name
having count>1


>The PARTITION BY clause sets the range of records that will be used for each "GROUP" within the OVER clause.
-----------------------------------------------------
select b.*, 
count(*) over(PARTITION by b.colour) as total_cr,
sum(b.weight) over(PARTITION by b.weight) as total_wt 
from bricks b
order by weight;

>Select stmt for specific partion:
--------------------------------
SELECT *
FROM   transaction_data_part PARTITION (part1)
WHERE  product_id = '1234'
