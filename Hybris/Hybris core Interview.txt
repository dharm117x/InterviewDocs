JaloSession:
================
A JaloSession is always associated with a SessionContext that holds references to the following:

The Hybris specific session object (the JaloSession class) is usually bound to HttpSession and has the same life time
final JaloSession js = (JaloSession) httpSession.getAttribute(Constants.WEB.JALOSESSION)

JaloSession's User
JaloSession's Language
JaloSession's Currency
JaloSession's Pricefactory
JaloSession's Locale
JaloSession's Timezone

final JaloSession session = JaloSession.getCurrentSession();
jalosession.getSessionContext().setUser( jalosession.getUserManager().getUserByLogin( "myUserName" ) );
jalosession.getSessionContext().setLanguage( jalosession.getC2LManager().getLanguageByIsoCode( "en" ) );

JaloSession.getCurrentSession().setTimeout( 10 ); Timeout within 10 s
JaloSession.getCurrentSession().setTimeout( -1/0 ); No Time Out

property update:

[extension].session.timeout=1500

Invalidate Session:
JaloSession.getCurrentSession().close();

Data Modeling:
====================
1. atomictypes: class="java.lang.Number" extends="java.lang.Object" autocreate="true" generate="false"

2. collectiontypes: code="TypeCollection" elementtype="Type" autocreate="true" generate="false"

3. enumtypes: code="EncodingEnum" autocreate="true" generate="true" dynamic="true"

4. maptypes: code="ExampleMap" argumenttype="Language" returntype="java.math.BigInteger" autocreate="true" generate="false"

5. relations: code="Media2DerivedMediaRel" localized="false" generate="true" autocreate="true"
> sourceElement- type="Media" qualifier="media" cardinality="one"
> targetElement- type="DerivedMedia" qualifier="derivedMedias" cardinality="many"
> modifiers- partof->true use for many side.

6. itemtypes: 
> code - The unique code of this type
> autocreate- If 'true', the attribute descriptor will be created during initialization. Default is 'true'.
> generate - If 'true', the sourcecode for this item will be created. Default is 'true'
> localized - 
> deployment - create table for new custom types.

7.attributes: 
> Qualifier- Qualifier of this attribute. Attribute qualifiers must be unique across a single type.
> type- The type of the attribute, such as 'Product', 'int' or 'java.lang.String'. Primitive java types will be mapped to the 
	corresponding atomic type
> autocreate="true"- If 'true', the attribute descriptor will be created during initialization.
> redeclare="false" - Lets you re-define the attribute definition from an inherited type. In essence, you can use a different type of attribute as 
 	      well as different modifier combinations than on the supertype.
> generate="true" - If 'true', getter and setter methods for this attribute will be generated during a hybris Suite build.
> defaultvalue - The default value is calculated by initialization and will not be re-calculated by runtime

7a. modifires attributes - 
read="true" - that is, if a getter method will be generated
write="true" - that is, if a setter method will be generated
search="true" - Defines if this attribute is searchable by a FlexibleSearch, persistent type-jalo, dynamic cannot seachable.
optional="true" - Defines if this attribute is mandatory or optional, default is true.

initial="fasle" -  If 'true', the attribute will only be writable during the item creation. Setting this to 'true' is only useful in combination 
 		with write='false'
unique="false" - If 'true', the value of this attribute has to be unique within all instances of this type. If there are multiple 
 		attributes marked as unique, then their combined values must be unique
encrypted="false"- If 'true', the attribute value will be stored in an encrypted way. 
partof="fasle"- Defines if the assigned attribute value only belongs to the current instance of this type.

> persistence- type - property, dynamic(attributeHandler)
  > columntype - custom propery type for database.
>	

8. indexes:
>  index name="Media_Code"
   > key attribute="code

> Convertor and populator:
-------------------------
Populator's are used to populate or convert the Data models objects into data transfer objects(DTO).

1. Update exsting popupator with custom one.
<bean parent="modifyPopulatorList">
	<property name="list" ref="productConverter"/>
	<property name="add" ref="apparelProductPopulator"/>
</bean>

2.  
 <bean id="carouselProductConverter" parent="defaultProductConverter">
		<property name="populators">
			<list merge="true">
				<ref bean="productPricePopulator"/>
			</list>
		</property>
</bean>

Reverse Populator's are used to populate or convert the Form data Objects or dto into model Objects
Ex: b2BCustomerReversePopulator



Cronjob:
========================
Simple cronjob: By extending AbstracJobperfomable<CronJobModel> ovverirde perform method with businnes logic and register in spring container.

1. Update following item with impex for new cron job.
> ServicelayerJob
> CronJob
> Trigger

Composite cron job:is a composition of multiple cronJobs used when we need to run a bundle of cronJobs successively.
> CompositeEntry - 
> CompositeCronJob - 
> Trigger- 

>>* Coronjob Retry: if in case failed to fetch data from FTP, then make retry same job by throw RetryException:


>>>Search Restriction: limit search results depending on which type is searched and which user is currently logged in.
========================================
Search Restriction is a set of rules which is applied on Flexible Search Query in order to limit the search results or to filter search results based on specific condition.

Craete via IMPEX:
-------------------
INSERT_UPDATE SearchRestriction;code[unique=true];principal(uid)[unique=true];query;restrictedType(code)[unique=true];active;generate
backendOrderVisibility;customersupportagentgroup;{versionID} IS NULL;Order;true;true

(Identifier)Code: backendOrderVisibility
(Apply on) principal(uid)[unique=true]: customersupportagentgroup
(Filter) query: {versionID} IS NULL
(Restricted type) restrictedType: Order
active: true
generate: true



Disable/Enable:
searchRestrictionService.disableSearchRestrictions();

searchRestrictionService.enableSearchRestrictions();


