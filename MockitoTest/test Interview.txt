Junit 5 and Mocito 5
---------------------
1. Stub - old not used
2. Mock - 

Stubbing can be defined as configuring a mock and defining the actions to be taken when a specific method of the mock is invoked. Mockito offers two methods of stubbing, namely, when-thenReturn and doReturn-when methods

class annotated with:
@ExtendWith(MockitoExtension.class)
class Test{	
@Mock
DataService dataService;
@InjectMocks
SomeBussinessImpl someBussiness;

@Test
public void test(){
when(dataService.retriveAllData()).thenReturn(new int[] {55});
int result = someBussiness.findGretestValue();
assertEquals(55, result);
}
}



Non Void Return Type:: Method return type is not void, we can use when().thenThrow():
----------
Ex::
 when(dictMock.getMeaning(anyString())).thenThrow(NullPointerException.class);
 assertThrows(NullPointerException.class, () -> dictMock.getMeaning("word"));

Void Return Type:: if our method returns void, we’ll use doThrow():
------------
Ex::
doThrow(IllegalStateException.class).when(dictMock).add(anyString(), anyString());   
assertThrows(IllegalStateException.class, () -> dictMock.add("word", "meaning"));

Exception as an Object:
-------------------
MyDictionary dictMock = mock(MyDictionary.class);
when(dictMock.getMeaning(anyString())).thenThrow(new NullPointerException("Error occurred")); 
assertThrows(NullPointerException.class, () -> dictMock.getMeaning("word"));


>>>Use of rgumentMatcher, and discuss how it differs from the ArgumentCaptor.
------------------------
>>ArgumentMatchers::

the String “Flower” is returned only when the analyze method of FlowerService receives the String “poppy”.

For single input:
-----------------
doReturn("Flower").when(flowerService).analyze("poppy");

For wide range of input::
-----------------------
when(flowerService.analyze(anyString())).thenReturn("Flower");


>> If a method has more than one argument, we can’t just use ArgumentMatchers for only some of the arguments.
 Hence, Mockito requires that we provide all arguments either by matchers or exact values

Not valid:
when(flowerService.isABigFlower("poppy", anyInt())).thenReturn(true);

Correct approach:
when(flowerService.isABigFlower(eq("poppy"), anyInt())).thenReturn(true);

There are two more points to note when we use matchers:
-------------------------------------------------
We can’t use them as a return value; we require an exact value when stubbing calls.
We can’t use argument matchers outside of verification or stubbing.


>Our verification will be simple; we’ll verify that we called the MessageService exactly 1 time with any Message:
verify(messageService, times(1)).deliverMessage(any(Message.class));

Custom Argument Matcher vs ArgumentCaptor
-----------------------------------------
Both techniques, custom argument matchers and ArgumentCaptor can be used to make sure certain arguments are passed to mocks.
However, ArgumentCaptor may be a better fit if we need it to assert on argument values to complete the verification, or our custom argument matcher isn’t likely to be reused.
Custom argument matchers via ArgumentMatcher are usually better for stubbing.

ArgumentCaptor allows us to capture an argument passed to a method to inspect it. This is especially useful when we can’t access the argument outside of the method we’d like to test.


