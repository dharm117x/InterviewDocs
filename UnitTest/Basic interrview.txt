Junit 5 and Mocito 5
---------------------
Start with Unit test class with:
----------------------------------

@ExtendWith(MockitoExtension.class)
public class MockitoAnnotationUnitTest {
    ...
}

OR

@BeforeEach
public void init() {
    MockitoAnnotations.openMocks(this);
}

> Verify test with asserts:
assertEquals(2, spiedList.size());

Mockito Annotaion:
-------------------
@Mock, @Spy, @Captor, and @InjectMocks.


>>> @Mock :: The most widely used annotation in Mockito is @Mock. We can use @Mock to create and inject mocked instances without having to call Mockito.mock manually.
EX: 
@Mock
List<String> mockedList;
OR
List mockList = Mockito.mock(ArrayList.class);

>>> @Spy:: annotation to spy on an existing instance.
@Spy
List<String> spiedList = new ArrayList<String>();
OR
List<String> spyList = Mockito.spy(new ArrayList<String>());

>>> @Captor:: annotation to create an ArgumentCaptor instance.

List mockList = Mockito.mock(List.class);
ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);
OR

@Mock
List mockedList;
@Captor 
ArgumentCaptor argCaptor;

Test: ArgumentCaptor

@Test
public void whenUseCaptorAnnotation_thenTheSame() {
    mockedList.add("one");
    Mockito.verify(mockedList).add(argCaptor.capture());

    assertEquals("one", argCaptor.getValue());
}

>>> @InjectMocks:: annotation to inject mock fields into the tested object automatically
@InjectMocks
MyDictionary dic = new MyDictionary();


InjectMocks is necessary for injecting both @Spy and @Mock instances.

>>>




