1. CSS and JS file config:

index.html:   Including the Bootstrap CSS and JavaScript files in the <head> section of the index.html file with a <link> and <script> tags,
styles.css:   Importing the Bootstrap CSS file in the global styles.css file of your Angular project with an @import keyword.
angular.json: Adding the Bootstrap CSS and JavaScript files in the styles and scripts arrays of the angular.json file of your project.

2. Directive: that add aditional behavior to element or classes and have 3 Type of directive:

> @Components: it is directives that include a template that is rendered in the place of the component

> Attribute directive:
  NgModel (tow way data binding), NgStyle (add/remove htmlm style), NgClass (add/remove css style)

 [ngStyle]="{backgroudcolor: getColor()}"

> Structural directive: Which change the DOM lay out by add/remove DOM element its applied with prefix * like *ngIf
  Only one structral directive on same element otherwise error throw.
  ngIf, ngFor, ngSwitch

  <p *ngIf="isTrue">
	<span>Data</span>
  </p>

  <p *ngFor="let data of datas;let i=index">
	<span>{{data}}-{{i}}</span>
  </p>

> Custom directive:


3. Decorators:  its provides configuration metadata that determines how the component, class or a function should be processed, instantiated and used at runtime. 

> Class Decorators: decorators that mark a class as an Angular component and provide configuration metadata that determines how the component should be processed, instantiated, and used at runtime.

@Component: class as an component and provide configuration metadata 
@NgModule: class as an NgModule and supplies configuration metadata.

>Property Decorators:Are decorators that mark a class field as an input property and supplies configuration metadata.			
@Input() exampleProperty: string;

>Method Decorators: Are decorator that declares a DOM event to listen for, and provides a handler method to run when that event occurs.

@HostListener('click', ['$event'])
onHostClick(event: Event) {
    // clicked, `event` available
}


>Parameter Decorators: injecting primitives into a constructor, where you need to manually tell Angular to inject a particular provider.
constructor(@Inject(MyService) myService) {
   console.log(myService); // MyService
}


3. Pipe: is a function to accept data as input and transform it into a desired output
Ex: <p>Birthday is {{ birthday | date }}</p>`
  
4. parameterized pipe: A pipe can accept any number of optional parameters to fine-tune its output, i.e Pipe:paramenter
Ex. <p>Birthday is {{ birthday | date:'dd/MM/yyyy'}}</p> 

5. Pipe chaining: 
<p>Birthday is {{  birthday | date:'fullDate' | uppercase}} </p>

6. Custome pipe:


7. Component Life cycle: Lifecycle hooks
> Hooks bw components and directive. 

a) ngOnInit(): is called once after the angualr componet or directive has been initializeed, spcifically after the first ngOnChange() call
its genrally used to initialized componet properties, fetch data, or setup event listener.

b) ngOnChanges(): its called when data-bound input property changed, its recived an obj that contains currnt and previus property values as args.

c) ngDoCheck():  its called when change detection runs.
d) ngOnDestory(): its called before destroy componet or directive, its use for cleanup, ex subscription, event listener.


> Hooks specific to components.
ngAfterContentInit(), ngAfterContentChecked(), ngAfterViewInint(), ngAfterViewChecked()


8. @ViewChild or @ViewChildren decorators are used to Query and get the reference of the DOM element in the Component. 
ViewChild returns the first matching element and ViewChildren returns all the matching elements as a QueryList of items.

@ValidChild: is a  directive to access elements in the view directly.
> ViewChild(selector: string | Function | Type<any>, opts: { read?: any; static: boolean; }): any

Html
<input #uname>

TS file:
@ViewChild('uname') input

ngAfterViewInit() {
  console.log(this.input.nativeElement.value);
}

> @ViewChildren: its provides a reference to multiple elements that can be used as an iterative list.

@ViewChildren(ChildDirective) viewChildren!: QueryList<ChildDirective>;

9. What is lazy loading?
> It is used for lazy loading by asynchronously loading the feature module for routing whenever required using the property loadChildren.

9. Observaable, Subject and Promise:
-------------------------------------

> Observable: its use to handle asynchronous operations and lazy by nature, meaning they do not start emitting values until a subscriber 
  actively listens for them and emit three types of values: onNext (data), onError (error), and onCompleted (completion).

Observale: Create, subscribe and unbscribe:
---------------------------------------------
import { Observable } from 'rxjs'; 
const myObservable = new Observable((observer) => { observer.next('First value'); 
observer.next('Second value'); 
setTimeout(() => { observer.next('Value after delay'); observer.complete(); }, 2000); });

myObservable.subscribe( 
(data) => console.log('Data:', data), 
(error) => console.log('Error:', error), 
() => console.log('Completed') );

myObservable.unsubscribe();


> Subject: is a special type of Observable that also acts as an Observer. It can both emit values and subscribe to other Observables

  Subjects can act as both Observables and Observers, while Observables can only emit values.
  Subjects can multicast, meaning they can emit values to multiple subscribers simultaneously, while Observables are unicast by default.

Type of subject: Subject, BehaviorSubject, ReplaySubject and AsyncSubject


> Promise (is part of JS not rxJs): Emit a single value,Eagerly execute upon creation, Cannot be canceled, Limited transformation capabilities
> Observable: Can emit multiple values over time, Lazy and only execute when subscribed, Can be canceled via unsubscription, Support various transformation methods

==================RxJS=========================

RxJS, short for Reactive Extensions for JavaScript, is a library for composing asynchronous and event-driven programs using observable sequences. It  is based on the principles of reactive programming.

HTTP client: Angular's HttpClient module uses observables for making HTTP requests, providing a simple and declarative way to handle asynchronous API calls.

Event handling: Angular uses RxJS observables to handle DOM events, such as button clicks and form submissions, allowing developers to create responsive user interfaces.

Reactive forms: Angular's reactive forms use RxJS observables to handle form state changes, enabling developers to build complex and dynamic forms with ease.

State management: Angular developers can use RxJS to build custom state management solutions, such as the popular NgRx library, which leverages the power of observables to manage application state in a reactive manner.

Real-time updates: Observables can be used to handle real-time data streams, such as WebSocket connections, enabling developers to create real-time applications with Angular.



