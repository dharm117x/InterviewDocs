Rest API QA
=====================
>>REST(Representational State Transfer) 

>>HATEOAS: stands for Hypermedia as the Engine of Application State and it is a component of RESTful API architecture and design. With the use of HATEOAS, the client-side needs minimal knowledge about how to interact with a server.
A HATEOAS request allows you to not only send the data but also specify the related actions. The response will contain hypermedia links that allow the client to take further actions.


>>REST services are scalable due to the statelessness that they do not store data on the server.

REST APIs can be kept secure with the help of safety measures such as Authentication and authorization, API Server Validation, TSl/SSL Encryption, 
Rate-limiting for DDoS attacks, and sensitive information such as username, password, or authentication token should not be visible in URIs

GET, PUT, and DELETE are idempotent methods, because they always return the same resource, update the same resource, or remove the same resource, respectively.
200 OK, 201 Created, 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 500 Internal Server Error, 502 Bad Gateway, 503 Service Unavailable.

>>Rest API Data validation 
----------------------------
1. Request Body data Using constraint validation annotaion: Ex @NotEmpty, @Email, @Min, @MAx etc
	public void createUser(@REquestBody @Valid User user){}
2. Request paramenter and Path field also validate with above annotaion
	public void getUser(@Requestparam @NotNull String name){}

>> Rest Api security 
-----------------------
> Restrict HTTP methods
> Input validation
> Validate content types
> Validate request content types
> Security Headers-X-Content-Type-Options: nosniff, 
> oauth2 sso enable
> 





