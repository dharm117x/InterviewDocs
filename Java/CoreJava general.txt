->The GoF Design Patterns:
==========================
->Creational Patterns for the creation of objects; 
Factory Design Pattern
Abstract Factory Design Pattern
Builder Design Pattern
Singleton Design Pattern
Prototype Design Pattern
Object Pool Design Pattern

->Structural Patterns to provide relationships between objects
Facade Design Pattern(Facade defines a higher-level interface that makes the subsystem easier to use)
Proxy Design Pattern(it provide a surrogate or placeholder for another object to control access to it.)
Decorator Design Pattern(it is attach with additional responsibilities to an object dynamically)
Composite Design Pattern()
Adapter Design Pattern

->Behavioral Patterns to help define how objects interact.
Observer Design Pattern:
------------------------
Observer design pattern also known as dependents and publish-subscribeIt define a one to many dependancy between objects 
so that when one objects so that when one object change state, all its dependents are notified and updated automatically.

State Design Pattern:
--------------------
State Design Pattern also known as objects for states, it allow an object to alter its behaviour when its internal state changes

Strategy Method Design Pattern:
------------------------------
Strategies provide a way to configure a class with one of many behaviors.
Use the Strategy pattern to avoid exposing complex, algorithm-specific data structures.

Solid priniciple of oops:
========================

S: Single responsibility: A class should have single responsibilty so if change it that class it will be not impact other class.
----------------
Ex. Helper,Utility, Builder class

O: Open Close: Class, Inteface, modules etc, should be open for extension but closed for modification.
--------------

L: Liskov subsitude: Any object in program shoud be repalacebale with an inctancs of its subtype.
--------------------
Ex: Method signature should have parent class signature so it will handle all child class argument without much change.

I: Interface Segragation: Its should be good for cliet-specific interface then keeping just on single genral-pupose interface.
-------------------------

D: Dependency Inversion: A class should depend on abstraction, and not on concreate implemenetations.
-----------------------
 

>OOPs: Inheritance, Encapsulation, Abstraction, Polymorphisam 
==============================================================
Is-A relationship: Whenever one class inherits another class, it is called an IS-A relationship.
Has-A relationship: Whenever an instance of one class is used in another class, it is called HAS-A (good choice)

Fail-faste(CuncurrentModificationException) and Fail-safe(by working on copy of collection Ex. CopyOnWriteArrayList):

Optional: to avoid nullpointer exception.

CompletableFeature-> async call its used inside function interface.

->Collection API:
====================
>> Arraylist:
ArrayList is a resizable array implementation in Java.ArrayList grows dynamically and ensures that there is always a space to add elements.

Default capacity 10 when capacity full its increase by 50% and copies all old elements from the old array to the new one. 
Repeated resizes will add load for memory allocation and garbage collection and the time to do the copy. 
if we know size of data best to pass that size as the initialCapacity to the ArrayList constructor.

 
>> LinkedList:
A linear data structure used to store the elements in contiguous locations is called a Linked List in Java.

Since a LinkedList acts as a dynamic array and we do not have to specify the size while creating it, the size of the list automatically increases when we dynamically add and remove items. And also, the elements are not stored in a continuous fashion. Therefore, there is no need to increase the size.
LinkedList is implemented using the doubly linked list data structure.

>> Hashmap:
HashMap in Java stores the data in (Key, Value) pairs, Hashing is a process of converting an object into integer form by using the method hashCode(). It’s necessary to write the hashCode() method properly for better performance of HashMap

1. Initial Capacity – It is the capacity of HashMap at the time of its creation (It is the number of buckets a HashMap can hold when the HashMap is instantiated). In java, it is 2^4=16 initially, meaning it can hold 16 key-value pairs.
2. Load Factor – It is the percent value of the capacity after which the capacity of Hashmap is to be increased (It is the percentage fill of buckets after which Rehashing takes place). In java, it is 0.75f by default, meaning the rehashing takes place after filling 75% of the capacity.
3. Threshold – It is the product of Load Factor and Initial Capacity. In java, by default, it is (16 * 0.75 = 12). That is, Rehashing takes place after inserting 12 key-value pairs into the HashMap.
4. Rehashing – It is the process of doubling the capacity of the HashMap after it reaches its Threshold. In java, HashMap continues to rehash(by default) in the following sequence – 2^4, 2^5, 2^6, 2^7, …. so on. 

->Stream API:
========================
Stream API is a way to express and process collections of objects. Enable us to perform operations like filtering, mapping,reducing and sorting.

Operation:
------------
Intermediate -> filter, map, sorting, count, 
Terminate    -> Collect, findAny,firstget,collect,

>> Consumer: is a functional interface that accepts a single input and returns no output
foreach, return nothing.
--> forEach 

>> Supplier: is a functional interface; it takes no arguments and returns a result
-->Math.random()

>> Predicate: its take one argument and return boolean value based on logic.
filter(r-> "ok".equals(ok))


-> FunctionalInterface:
===========================
A functional interface is an interface that contains only one abstract method however they can include any quantity of default and static methods. 

> @FunctionalInterface annotation is used to ensure that the functional interface can’t have more than one abstract method.
However, it is not mandatory to use this annotation.

Ex. Runnable, ActionListener,Comparable, Supplier, Consumer, Predicate


-> Exception handling:
===========================

ClassClassNotFoundException - when you try to load a class at runtime using Class.forName() or loadClass() methods and requested classes are not found in classpath.

OutOfMemoryError – thrown when the JVM cannot allocate more objects because it is out memory, and the garbage collector was unable to make more available

StackOverflowError – occurs when the stack space for a thread has run out, typically because an application recurses too deeply
ExceptionInInitializerError – signals that an unexpected exception occurred during the evaluation of a static initializer

NoClassDefFoundError – its occurred when the class was present during compile time and the program was compiled and linked successfully but the class was not present during runtime. It is an error that is derived from LinkageError.

UnsupportedClassVersionError – occurs when the JVM attempts to read a class file and determines that the version in the file is not supported, 
normally because the file was generated with a newer version of Java

-> Multithreading:
=======================
Lock: Threads checked the availability of access control over shared objects through flags attached to the object that indicated whether or not the shared resource is free (unlocked) or busy (locked), its achive using Lock Interface.

Monitor namely mutual exclusion between various threads and cooperation among threads working at common tasks. Monitors basically ‘monitor’ the access control of shared resources and objects among threads.In Java, monitors are implemented using synchronized keyword.

ReentrantLocks: are provided in Java to provide synchronization with greater flexibility.

The ReentrantLock class implements the Lock interface and provides synchronization to methods while accessing shared resources. The code which manipulates the shared resource is surrounded by calls to lock and unlock method. This gives a lock to the current working thread and blocks all other threads which are trying to take a lock on the shared resource

Object level lock and Class level lock are used to achieve synchronization mechanisms in a multi-threaded application.

>> Object level lock: 
public synchronized int incrementCount(){}
synchronized (this) {    //thread has acquired lock on  current objec }

>> Class level lock prevents multiple threads to enter a synchronized block in any of all available instances of the class on runtime
Thread can acquire the lock at a class level by two methods namely
Using the synchronized static method.
public static synchronized int incrementCount(){}

Using synchronized block.
synchronized (Geek.class) {    //thread has acquired lock on  Geek class }

>> Deadlock occurs in a situation where two or more threads are blocked forever, waiting for each other
Prevention:
1. moniter thread dump
2. Avoid Nested Locks
3. Avoid Unnecessary Locks
4. Using thread join-> join(): It will put the current thread on wait until the thread on which it is called is dead.

