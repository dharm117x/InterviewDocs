1. Fibnocy number: 0 1 1 2 3 5 8 13 to n
		int i1 = 0;
		int i2 = 1;
		for (int i = 0; i < n; i++) {
			System.out.println(i1);
			
			int i3 = i1 + i2;
			i1 = i2;
			i2 = i3;

			
2. Prime number test:
	if (test == 0 || test == 1) {
			return false;
	}
	for (int i = 2; i < test / 2 + 1; i++) {
		if (test % i == 0) {
			return false;
		}
	}
	return true;

3. Find large no:
	int[] data = { 11, 33, 55, 99, 90, 24, 19 };
		int max = data[0];
		for (int i = 1; i < data.length; i++) {
			if (data[i] > max) {
				max = data[i];
			}
		

}

4. Find duplicate no:
		int[] data = { 11, 11, 33, 55, 99, 99, 90, 24, 19 };
		for (int i = 0; i < data.length; i++) {
			for (int j = i + 1; j < data.length; j++) {
				if (data[i] == data[j]) {
					System.out.println("duplicate no-> "+data[i]);
				}
			}
		}
5. Plindrom test:
	char[] array = str.toCharArray();
	char[] revc= new char[array.length];
	String revs= "";
	for (int i = array.length-1, j=0; i >=0 ; i--,j++) {
		revc[j]= array[i];
		revs = array[i] + revs;
	}

	System.out.println("Reves::"+revs);

	int orig = number;
	int revs = 0;
	while (number>0) {
		revs= revs *10 + number%10;
		number= number/10;
	}

6. Char count in string:
   data.chars().mapToObj(m -> (char) m)
				.collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream()
				.filter(f->f.getValue()>1).collect(Collectors.toMap(Entry::getKey, Entry::getValue));


7. First not repeated char in string.
	LinkedHashMap<Character,Long> hashMap = data.chars().mapToObj(m -> Character.toLowerCase((char) m))
				.collect(Collectors.groupingBy(Function.identity(), LinkedHashMap::new, Collectors.counting()));
		
		Character charc = hashMap.entrySet().stream().filter(f-> f.getValue()==1L).map(e->e.getKey()).findFirst().get();


8. LCM and HCF of two number.

static int getLCM(int x, int y){
	return (x*y)/getHCF(x, y);
}

static int getHCF(int x, int y){
	int hcf = 0;
	for(int i=1;i<=x && i<=y;i++) {
		if(x%i==0 && y%i==0) {
			hcf= i;
		}
	}
	return hcf;
}


	