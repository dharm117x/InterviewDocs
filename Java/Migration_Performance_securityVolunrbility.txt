Java 8 to 17
---------------
Java 8:
--------
Lambda Expressions
Functional Interfaces
Method Reference
Streams
Comparable and Comparator
Optional Class
Date/Time API
Miscellaneous

Java 11:
------------
Java 10 was the last free Oracle JDK release that we could use commercially without a license. Starting with Java 11, there’s no free long-term support (LTS) from Oracle.
Thankfully, Oracle continues to provide Open JDK releases, which we can download and use without charge.

New String Methods: isBlank, lines, strip, stripLeading, stripTrailing, and repeat.
New File Methods:readString and writeString static methods from the Files
Collection to an Array:
List sampleList = Arrays.asList("Java", "Kotlin");
String[] sampleArray = sampleList.toArray(String[]::new);
assertThat(sampleArray).containsExactly("Java", "Kotlin");

In release 11, it has now completely removed:
---------------------------------------------------
Java API for XML-Based Web Services (java.xml.ws)
Java Architecture for XML Binding (java.xml.bind)
JavaBeans Activation Framework (java.activation)
Common Annotations (java.xml.ws.annotation)
Common Object Request Broker Architecture (java.corba)
JavaTransaction API (java.transaction)


Migration java 7 -17
================================
1. Crate branch name branch/java_migration17 from develop for migration related code change.
2. Setup local machine with latest JDK tolls ex. jdk 17
3. Checkout branch code in your local machine and compile code with new JDK17. its may be chance of comilation error because of some deprected class or method are renamed or removed then fixed accordingly.
4. In New JDK enterprise edition related package are removed so we need to add those jars accrdingly.
5. Some third party jars may not support jdk 17 so either take new version or patch from that vendor.
6. After fixed locally we have to commit our code in branch then we need to deploy in lower env so we have to setup jdk 17 on those env and update CI-CD tools for building process.
7. After succefull build we need to deploy on dev for regression testing if found some error or exception then fixed accordingly.


Springboot 1 to 2
--------------------


Springboot 2 to 3
--------------------


Performance Optimization:
-----------------------
Choose the Right Data Structures
Optimize Memory Usage
Use StringBuilder for String Concatenation
Optimize Loops
Use Caching and Memoization
Take Advantage of Java Concurrency
Profile and Benchmark Your Code
Use Lazy Initialization
Optimize Garbage Collection
Keep Up-to-Date with Java Updates


Code review:
------------------
Follow Java code conventions and code formating.
Ensure the code follows standard naming conventions
Make sure it handles constants efficiently
Remove unsued variable, methods and hard-coded data.
Avoid unnecessary comments in code?
Check code coverage with unit test cases.
Replace imperative code with lambdas and streams
Beware of the NullPointerException
Check if the code includes proper exception handling.
Override hashCode when overriding equals

Make sure variables don’t cause memory leaks
Creating a bunch of unnecessary variables can overwhelm the heap and lead to memory leaks and cause performance problems.
Ex:
Avoid This
boolean removed = myItems.remove(item); return removed;
Try This Instead
return myItems.remove(item); 

Security volunrbility and fixed
=================================
>> Java-vulnerabilities-and-how-to-fix-them
----------------------------
OWASP TOP 10 Vulnerabilities

A1	Injection
A2	Broken Authentication and Session Management (XSS)
A3	Cross Site Scripting (XSS)
A4	Insecure Direct Object References
A5	Security Misconfiguration
A6	Sensitive Data Exposure
A7	Missing Function Level Access Control
A8	Cross Site Request Forgery (CSRF)
A9	Using Components with Known Vulnerabilities
A10	Unvalidated Redirects and Forwards

>Unpatched Libraries
Unpatched libraries can introduce critical risks to your application. Utilizing such a library can introduce vulnerabilities, potentially bypassing security controls that are in place elsewhere.

sol: Be sure to keep components up-to-date and patched. Monitor for reported vulnerabilities so that prompt action may be taken

>Cross-Site Scripting ("XSS")-> Occur when an attacker embeds malicious client-side script or HTML in a form or query variables submitted to a site via a web interface.

Sol: any encoding or filtering scheme: < > “ ‘ ; & ? One or more of these characters, such as the single quote

>Application Misconfiguration: Debug

Sol: Debug mode should be disabled in production. In addition to any debug mode provided by the programming language, developers may implement their own custom debug mode

>Application Misconfiguration: Global Error Handling Disabled
Disabling a global error handling mechanism increases the risk that verbose implementation details will be revealed to attackers through a stack trace.

>Application Misconfiguration: Excessive Permissions
An application may use custom permissions that can then allow a separate application to access hardware level functionality through its API
Sol: Applications should only request the minimum permissions needed for stated application functionality.

Sol: To minimize the risk of disclosing sensitive implementation details through error messages, ensure the application deployment d
escriptor declares an error-page declaration that catches all uncaught exceptions thrown by the application.

>Disclosure: ClearText Password
sol: System passwords should be encrypted, or the configuration file they are contained within should be encrypted, whenever possible

>Denial of Service (DoS): Readline
ven if the number of lines to be read is limited, an attacker can supply a large file with no newline characters and cause an OutOfMemoryError exception.

sol: Another solution is to override both BufferedReader and the readLine() method and implement a limit for the maximum number of characters that can be read. In the absence of a more secure method, avoid taking input from the client whenever possible and ensure data being read is trusted.

>Insufficient Session Expiration
User sessions with long or no inactivity timeouts may help attackers replay attacks or hijack sessions
Sol: In general, idle user sessions should timeout within 15-20 minutes, or less for sensitive applications. 


